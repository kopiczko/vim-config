snippet append
${1:v} = append($1, $0)
endsnippet

snippet ctx "ctx context.Context," w
ctx context.Context,
endsnippet

snippet /^package/ "package declaration" r
package ${1:`!v expand('%:p:h:t')`}

endsnippet

snippet printf "fmt.Printf()" b
fmt.Printf("${1:%#v}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\))/}$2${1/([^%]|%%)*(%.)?.*/(?2:\))/}
endsnippet

snippet log "o.logger.LogCtx(ctx, ..."
${1:receiver}.logger.LogCtx(ctx, "level", "${2:debug}", "message", "$0")
endsnippet

snippet logf "o.logger.LogCtx(ctx, ..."
${1:receiver}.logger.LogCtx(ctx, "level", "${2:debug}", "message", fmt.Sprintf("$0"))
endsnippet


snippet logerr "o.logger.LogCtx(ctx, ..."
${1:receiver}.logger.LogCtx(ctx, "level", "error", "message", "$0", "stack", microerror.JSON(err))
endsnippet

snippet logcancel "canceling resource reconciliation..."
${1:receiver}.logger.LogCtx(ctx, "level", "${2:debug}", "message", "canceling resource reconciliation for custom object")
endsnippet

#
# if config.N == nil {
#
snippet invalidconfig "if config.N == nil" b
if config.${1:Name} == ${2:nil} {
	return nil, microerror.Maskf(invalidConfigError, "%T.$1 must not be empty", config)
}

endsnippet

#
# if err := config.N.Validate(); err == nil {
#
snippet invalidconfigvalidate "if config.N == nil" b
if err := config.${1:Name}.Validate(); err != nil {
	return nil, microerror.Maskf(invalidConfigError, "config.$1.%s", err)
}
$0
endsnippet
